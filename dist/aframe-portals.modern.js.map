{"version":3,"file":"aframe-portals.modern.js","sources":["../src/portal.js","../src/portal-manager.js"],"sourcesContent":["AFRAME.registerComponent('portal', {\r\n  schema: {\r\n    destination: { default: '' },\r\n    width: { default: 2 },\r\n    height: { default: 3 },\r\n    maxRecursion: { default: 2 },\r\n    teleportCooldown: { default: 100 }, //in ms\r\n    enableTeleport: { default: true },\r\n  },\r\n\r\n  init: function () {\r\n    const el = this.el;\r\n    const sceneEl = el.sceneEl;\r\n    const data = this.data;\r\n\r\n    el.justTeleported = false;\r\n    el.isCameraColliding = false;\r\n\r\n    //portal mesh\r\n    const geometry = new THREE.BoxBufferGeometry(data.width, data.height, 0.0001);\r\n    const material = new THREE.MeshBasicMaterial({\r\n      colorWrite: false,\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    mesh.frustumCulled = true;\r\n    mesh.matrixAutoUpdate = false;\r\n    mesh.visible = true;\r\n    mesh.name = 'portal-surface';\r\n\r\n    el.object3D.add(mesh);\r\n\r\n    sceneEl.addEventListener('portal-teleported', () => {\r\n      el.justTeleported = true;\r\n    });\r\n\r\n    el.addEventListener('camera-collision-start', function () {\r\n      if (data.enableTeleport == false) return;\r\n      if (el.justTeleported === true) return;\r\n      el.justTeleported = true;\r\n      sceneEl.emit('portal-teleported');\r\n\r\n      //teleport the camera\r\n      const camera = sceneEl.camera;\r\n      const cameraEl = camera.el;\r\n\r\n      const destPortal = document.querySelector(data.destination).object3D;\r\n\r\n      const srcRotation = el.object3D.rotation;\r\n      const dstRotation = destPortal.rotation;\r\n\r\n      const deltaRotation = new THREE.Euler(\r\n        srcRotation.x - dstRotation.x,\r\n        srcRotation.y - dstRotation.y + Math.PI,\r\n        srcRotation.z - dstRotation.z\r\n      );\r\n\r\n      if (cameraEl.components['look-controls']) {\r\n        cameraEl.components['look-controls'].yawObject.rotation.y -= deltaRotation.y;\r\n      }\r\n\r\n      const bufferDistance = 0.075; //teleports the player this distance away from the exit portal\r\n      const buffer = el.object3D.getWorldDirection(new THREE.Vector3()).multiplyScalar(bufferDistance);\r\n\r\n      const cameraPosition = camera.getWorldPosition(new THREE.Vector3());\r\n      const portalPosition = el.object3D.getWorldPosition(new THREE.Vector3());\r\n\r\n      const deltaPosition = new THREE.Vector3().subVectors(cameraPosition, portalPosition).sub(buffer);\r\n\r\n      const rotatedDeltaPosition = deltaPosition.clone();\r\n      const theta = deltaRotation.y;\r\n      rotatedDeltaPosition.x = deltaPosition.x * Math.cos(theta) - deltaPosition.z * Math.sin(theta);\r\n      rotatedDeltaPosition.z = deltaPosition.x * Math.sin(theta) + deltaPosition.z * Math.cos(theta);\r\n\r\n      const destPosition = destPortal.position.clone().add(rotatedDeltaPosition);\r\n\r\n      cameraEl.object3D.position.x = destPosition.x;\r\n      cameraEl.object3D.position.y = destPosition.y;\r\n      cameraEl.object3D.position.z = destPosition.z;\r\n    });\r\n\r\n    //use sceneEl to store state\r\n    if (!sceneEl.portals) {\r\n      sceneEl.portals = [];\r\n      sceneEl.portalPairs = [];\r\n    }\r\n\r\n    //if there is not already a portal-manager entity, create one\r\n    if (Array.from(sceneEl.children).reduce((acc, c) => acc || c.hasAttribute('portal-manager'), false) === false) {\r\n      const entity = document.createElement('a-entity');\r\n      entity.setAttribute('portal-manager', { maxRecursion: data.maxRecursion });\r\n      sceneEl.appendChild(entity);\r\n    }\r\n\r\n    const portals = sceneEl.portals;\r\n    const pairs = sceneEl.portalPairs;\r\n\r\n    portals.push(el.object3D);\r\n\r\n    const dest = document.querySelector(data.destination);\r\n    if (dest) {\r\n      let isInPairs = false;\r\n      pairs.forEach((pair) => {\r\n        pair.forEach((portal) => {\r\n          if (portal == el.object3D) {\r\n            isInPairs = true;\r\n          }\r\n        });\r\n      });\r\n\r\n      if (isInPairs == false) {\r\n        pairs.push([el.object3D, dest.object3D]);\r\n      }\r\n    }\r\n  },\r\n\r\n  tick: function () {\r\n    const el = this.el;\r\n    if (el.justTeleported === true)\r\n      setTimeout(() => {\r\n        el.justTeleported = false;\r\n      }, this.data.teleportCooldown);\r\n  },\r\n\r\n  /*\r\n  renderSinglePortal: function () {\r\n    const sceneEl = this.el.sceneEl;\r\n    const scene = sceneEl.object3D;\r\n    const renderer = sceneEl.renderer;\r\n    const camera = sceneEl.camera;\r\n\r\n    renderer.autoClear = false;\r\n    camera.matrixAutoUpdate = false;\r\n\r\n    const gl = renderer.getContext();\r\n\r\n    const portal = this.el.object3D;\r\n    const destPortal = document.querySelector(this.data.destination).object3D;\r\n\r\n    const tmpScene = new THREE.Scene();\r\n    tmpScene.children = scene.children;\r\n\r\n    const portalScene = new THREE.Scene();\r\n    portalScene.children = portal.children;\r\n\r\n    const virtualCam = new THREE.PerspectiveCamera().copy(camera);\r\n    virtualCam.matrixWorld = computeViewMatrix(camera, portal, destPortal);\r\n    //projection matrix for Oblique View Frustum Depth Projection and Clipping\r\n    virtualCam.projectionMatrix = computeProjectionMatrix(\r\n      destPortal,\r\n      virtualCam.matrixWorld,\r\n      virtualCam.projectionMatrix\r\n    );\r\n\r\n    gl.enable(gl.STENCIL_TEST);\r\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\r\n    gl.stencilFunc(gl.NOTEQUAL, 1, 0xff);\r\n    gl.stencilMask(0xff);\r\n\r\n    renderer.render(portalScene, camera);\r\n\r\n    gl.stencilFunc(gl.EQUAL, 1, 0xff);\r\n    gl.stencilMask(0x00);\r\n\r\n    renderer.clearDepth();\r\n    renderer.render(tmpScene, virtualCam);\r\n\r\n    gl.stencilMask(0xff);\r\n    gl.disable(gl.STENCIL_TEST);\r\n\r\n    camera.matrixAutoUpdate = true;\r\n  },\r\n  */\r\n});\r\n","AFRAME.registerComponent('portal-manager', {\r\n  schema: {\r\n    maxRecursion: { default: 2 },\r\n  },\r\n\r\n  init: function () {},\r\n\r\n  tock: function () {\r\n    const camera = this.el.sceneEl.camera;\r\n    const renderer = this.el.sceneEl.renderer;\r\n\r\n    this.renderRecursivePortals(renderer, camera, 0);\r\n    this.collisionDetection();\r\n  },\r\n\r\n  renderRecursivePortals: function (renderer, camera, recursionLevel) {\r\n    const sceneEl = this.el.sceneEl;\r\n    const portals = sceneEl.portals;\r\n    const pairs = sceneEl.portalPairs;\r\n\r\n    const gl = renderer.getContext();\r\n\r\n    renderer.autoClear = false;\r\n    camera.matrixAutoUpdate = false;\r\n\r\n    pairs.forEach((pair) => {\r\n      pair.forEach((portal, i) => {\r\n        const destPortal = pair[1 - i];\r\n\r\n        const portalScene = new THREE.Scene();\r\n        portalScene.children = portal.children;\r\n\r\n        gl.colorMask(false, false, false, false);\r\n        gl.depthMask(false);\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.enable(gl.STENCIL_TEST);\r\n        gl.stencilFunc(gl.NOTEQUAL, recursionLevel, 0xff);\r\n        gl.stencilOp(gl.INCR, gl.KEEP, gl.KEEP);\r\n        gl.stencilMask(0xff);\r\n\r\n        //render portal into stencil buffer\r\n        renderer.render(portalScene, camera);\r\n\r\n        const virtualCam = new THREE.PerspectiveCamera().copy(camera);\r\n        virtualCam.matrixWorld = computeViewMatrix(camera, portal, destPortal);\r\n        //projection matrix for Oblique View Frustum Depth Projection and Clipping\r\n        virtualCam.projectionMatrix = computeProjectionMatrix(\r\n          destPortal,\r\n          virtualCam.matrixWorld,\r\n          virtualCam.projectionMatrix\r\n        );\r\n\r\n        if (recursionLevel == this.data.maxRecursion) {\r\n          gl.colorMask(true, true, true, true);\r\n          gl.depthMask(true);\r\n          renderer.clear(false, true, false);\r\n          gl.enable(gl.DEPTH_TEST);\r\n          gl.enable(gl.STENCIL_TEST);\r\n          gl.stencilMask(0x00);\r\n          gl.stencilFunc(gl.EQUAL, recursionLevel + 1, 0xff);\r\n\r\n          const nonPortals = new THREE.Scene();\r\n          nonPortals.children = sceneEl.object3D.children.filter((obj) => !portals.includes(obj));\r\n\r\n          const tmpScene = new THREE.Scene();\r\n          tmpScene.children = sceneEl.object3D.children;\r\n\r\n          //render the rest of the scene, limited to the stencil buffer\r\n          renderer.render(tmpScene, virtualCam);\r\n        } else {\r\n          //recursion\r\n          this.renderRecursivePortals(renderer, virtualCam, recursionLevel + 1);\r\n        }\r\n\r\n        gl.colorMask(false, false, false, false);\r\n        gl.depthMask(false);\r\n        gl.enable(gl.STENCIL_TEST);\r\n        gl.stencilMask(0xff);\r\n        gl.stencilFunc(gl.NOTEQUAL, recursionLevel + 1, 0xff);\r\n        gl.stencilOp(gl.DECR, gl.KEEP, gl.KEEP);\r\n\r\n        //render portal into stencil buffer\r\n        renderer.render(portalScene, camera);\r\n      });\r\n    });\r\n\r\n    gl.disable(gl.STENCIL_TEST);\r\n    gl.stencilMask(0x00);\r\n    gl.colorMask(false, false, false, false);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthMask(true);\r\n    gl.depthFunc(gl.ALWAYS);\r\n    renderer.clear(false, true, false);\r\n\r\n    //render portals into depth buffer\r\n    portals.forEach((portal) => {\r\n      const portalScene = new THREE.Scene();\r\n      portalScene.children = portal.children;\r\n      renderer.render(portalScene, camera);\r\n    });\r\n\r\n    gl.depthFunc(gl.LESS);\r\n    gl.enable(gl.STENCIL_TEST);\r\n    gl.stencilMask(0x00);\r\n    gl.stencilFunc(gl.LEQUAL, recursionLevel, 0xff);\r\n    gl.colorMask(true, true, true, true);\r\n    gl.depthMask(true);\r\n\r\n    const nonPortals = new THREE.Scene();\r\n    //nonPortals.children = sceneEl.object3D.children.filter((obj) => !portals.includes(obj));\r\n    nonPortals.children = sceneEl.object3D.children;\r\n\r\n    const tmpScene = new THREE.Scene();\r\n    tmpScene.children = sceneEl.object3D.children;\r\n\r\n    //render the rest of the scene, only at recursionLevel\r\n    renderer.render(tmpScene, camera);\r\n\r\n    camera.matrixAutoUpdate = true;\r\n  },\r\n\r\n  collisionDetection: function () {\r\n    const sceneEl = this.el.sceneEl;\r\n    const portals = sceneEl.portals;\r\n    const camera = sceneEl.camera;\r\n\r\n    //portal collision detection\r\n    const collisions = portals.map((portal) => {\r\n      const mesh = portal.children.filter((c) => c.name == 'portal-surface')[0];\r\n      const bbox = new THREE.Box3().setFromObject(mesh);\r\n      const bounds = {\r\n        portal: portal,\r\n        xMin: bbox.min.x,\r\n        xMax: bbox.max.x,\r\n        yMin: bbox.min.y,\r\n        yMax: bbox.max.y,\r\n        zMin: bbox.min.z,\r\n        zMax: bbox.max.z,\r\n      };\r\n      return bounds;\r\n    });\r\n\r\n    const width = 0.1; //width of user hitbox, arbitrary number\r\n\r\n    //calculate user bounds\r\n    const camPos = camera.getWorldPosition(new THREE.Vector3());\r\n    const bounds = {\r\n      xMin: camPos.x - width / 2,\r\n      xMax: camPos.x + width / 2,\r\n      yMin: camPos.y - width / 2,\r\n      yMax: camPos.y + width / 2,\r\n      zMin: camPos.z - width / 2,\r\n      zMax: camPos.z + width / 2,\r\n    };\r\n\r\n    collisions.forEach((obj) => {\r\n      if (\r\n        bounds.xMin <= obj.xMax &&\r\n        bounds.xMax >= obj.xMin &&\r\n        bounds.yMin <= obj.yMax &&\r\n        bounds.yMax >= obj.yMin &&\r\n        bounds.zMin <= obj.zMax &&\r\n        bounds.zMax >= obj.zMin\r\n      ) {\r\n        //there is a collision\r\n        const portalEl = obj.portal.el;\r\n        if (portalEl.isCameraColliding === false) {\r\n          portalEl.emit('camera-collision-start');\r\n          portalEl.isCameraColliding = true;\r\n        }\r\n      } else {\r\n        const portalEl = obj.portal.el;\r\n        if (portalEl.isCameraColliding === true) {\r\n          portalEl.emit('camera-collision-end');\r\n          portalEl.isCameraColliding = false;\r\n        }\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\nfunction computeViewMatrix(camera, src, dst) {\r\n  const srcToCam = camera.matrixWorld.clone();\r\n  srcToCam.invert().multiply(src.matrixWorld);\r\n\r\n  const dstInverse = dst.matrixWorld.clone().invert();\r\n  const rotationYMatrix = new THREE.Matrix4().makeRotationY(Math.PI);\r\n  const srcToDst = new THREE.Matrix4().multiply(srcToCam).multiply(rotationYMatrix).multiply(dstInverse);\r\n\r\n  return srcToDst.invert();\r\n}\r\n\r\nfunction computeProjectionMatrix(dst, viewMat, projMat) {\r\n  const cameraInverseViewMat = viewMat.clone().invert();\r\n\r\n  const dstRotationMatrix = new THREE.Matrix4().extractRotation(dst.matrixWorld);\r\n\r\n  const normal = new THREE.Vector3().set(0, 0, 1).applyMatrix4(dstRotationMatrix);\r\n\r\n  const clipPlane = new THREE.Plane();\r\n  clipPlane.setFromNormalAndCoplanarPoint(normal, dst.getWorldPosition(new THREE.Vector3()));\r\n  clipPlane.applyMatrix4(cameraInverseViewMat);\r\n\r\n  const clipVector = new THREE.Vector4();\r\n  clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant);\r\n\r\n  const projectionMatrix = projMat.clone();\r\n\r\n  const q = new THREE.Vector4();\r\n  q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\r\n  q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\r\n  q.z = -1.0;\r\n  q.w = (1.0 + projectionMatrix.elements[10]) / projMat.elements[14];\r\n\r\n  clipVector.multiplyScalar(2 / clipVector.dot(q));\r\n\r\n  projectionMatrix.elements[2] = clipVector.x;\r\n  projectionMatrix.elements[6] = clipVector.y;\r\n  projectionMatrix.elements[10] = clipVector.z + 1.0;\r\n  projectionMatrix.elements[14] = clipVector.w;\r\n\r\n  return projectionMatrix;\r\n}\r\n"],"names":["AFRAME","registerComponent","schema","destination","default","width","height","maxRecursion","teleportCooldown","enableTeleport","init","el","this","sceneEl","data","justTeleported","isCameraColliding","geometry","THREE","BoxBufferGeometry","material","MeshBasicMaterial","colorWrite","mesh","Mesh","frustumCulled","matrixAutoUpdate","visible","name","object3D","add","addEventListener","emit","camera","cameraEl","destPortal","document","querySelector","srcRotation","rotation","dstRotation","deltaRotation","Euler","x","y","Math","PI","z","components","yawObject","buffer","getWorldDirection","Vector3","multiplyScalar","cameraPosition","getWorldPosition","portalPosition","deltaPosition","subVectors","sub","rotatedDeltaPosition","clone","theta","cos","sin","destPosition","position","portals","portalPairs","Array","from","children","reduce","acc","c","hasAttribute","entity","createElement","setAttribute","appendChild","pairs","push","dest","isInPairs","forEach","pair","portal","tick","setTimeout","tock","renderRecursivePortals","renderer","collisionDetection","recursionLevel","gl","getContext","autoClear","i","portalScene","Scene","colorMask","depthMask","disable","DEPTH_TEST","enable","STENCIL_TEST","stencilFunc","NOTEQUAL","stencilOp","INCR","KEEP","stencilMask","render","virtualCam","PerspectiveCamera","copy","matrixWorld","src","dst","srcToCam","invert","multiply","dstInverse","rotationYMatrix","Matrix4","makeRotationY","computeViewMatrix","projectionMatrix","viewMat","projMat","cameraInverseViewMat","dstRotationMatrix","extractRotation","normal","set","applyMatrix4","clipPlane","Plane","setFromNormalAndCoplanarPoint","clipVector","Vector4","constant","q","sign","elements","w","dot","computeProjectionMatrix","clear","EQUAL","filter","obj","includes","tmpScene","DECR","depthFunc","ALWAYS","LESS","LEQUAL","collisions","map","bbox","Box3","setFromObject","xMin","min","xMax","max","yMin","yMax","zMin","zMax","camPos","bounds","portalEl"],"mappings":"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"}