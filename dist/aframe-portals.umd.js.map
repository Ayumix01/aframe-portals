{"version":3,"file":"aframe-portals.umd.js","sources":["../src/portal.js","../src/portal-manager.js"],"sourcesContent":["AFRAME.registerComponent('portal', {\r\n  schema: {\r\n    destination: { default: '' },\r\n    width: { default: 2 },\r\n    height: { default: 3 },\r\n    maxRecursion: { default: 2 },\r\n    teleportCooldown: { default: 100 }, //in ms\r\n    enableTeleport: { default: true },\r\n  },\r\n\r\n  init: function () {\r\n    const el = this.el;\r\n    const sceneEl = el.sceneEl;\r\n    const data = this.data;\r\n\r\n    el.justTeleported = false;\r\n    el.isCameraColliding = false;\r\n\r\n    //portal mesh\r\n    const geometry = new THREE.BoxBufferGeometry(data.width, data.height, 0.0001);\r\n    const material = new THREE.MeshBasicMaterial();\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    mesh.name = 'portal-surface';\r\n\r\n    el.object3D.add(mesh);\r\n\r\n    sceneEl.addEventListener('portal-teleported', () => {\r\n      el.justTeleported = true;\r\n    });\r\n\r\n    el.addEventListener('camera-collision-start', function () {\r\n      if (data.enableTeleport == false) return;\r\n      if (el.justTeleported === true) return;\r\n      el.justTeleported = true;\r\n      sceneEl.emit('portal-teleported');\r\n\r\n      //teleport the camera\r\n      const camera = sceneEl.camera;\r\n      const cameraEl = camera.el;\r\n\r\n      const destPortal = document.querySelector(data.destination).object3D;\r\n\r\n      const srcRotation = el.object3D.rotation;\r\n      const dstRotation = destPortal.rotation;\r\n\r\n      const deltaRotation = new THREE.Euler(\r\n        srcRotation.x - dstRotation.x,\r\n        srcRotation.y - dstRotation.y + Math.PI,\r\n        srcRotation.z - dstRotation.z\r\n      );\r\n\r\n      if (cameraEl.components['look-controls']) {\r\n        cameraEl.components['look-controls'].yawObject.rotation.y -= deltaRotation.y;\r\n      }\r\n\r\n      const bufferDistance = 0.075; //teleports the player this distance away from the exit portal\r\n      const buffer = el.object3D.getWorldDirection(new THREE.Vector3()).multiplyScalar(bufferDistance);\r\n\r\n      const cameraPosition = camera.getWorldPosition(new THREE.Vector3());\r\n      const portalPosition = el.object3D.getWorldPosition(new THREE.Vector3());\r\n\r\n      const deltaPosition = new THREE.Vector3().subVectors(cameraPosition, portalPosition).sub(buffer);\r\n\r\n      const rotatedDeltaPosition = deltaPosition.clone();\r\n      const theta = deltaRotation.y;\r\n      rotatedDeltaPosition.x = deltaPosition.x * Math.cos(theta) - deltaPosition.z * Math.sin(theta);\r\n      rotatedDeltaPosition.z = deltaPosition.x * Math.sin(theta) + deltaPosition.z * Math.cos(theta);\r\n\r\n      const destPosition = destPortal.position.clone().add(rotatedDeltaPosition);\r\n\r\n      cameraEl.object3D.position.x = destPosition.x;\r\n      cameraEl.object3D.position.y = destPosition.y;\r\n      cameraEl.object3D.position.z = destPosition.z;\r\n    });\r\n\r\n    //use sceneEl to store state\r\n    if (!sceneEl.portals) {\r\n      sceneEl.portals = [];\r\n      sceneEl.portalPairs = [];\r\n    }\r\n\r\n    //if there is not already a portal-manager entity, create one\r\n    if (Array.from(sceneEl.children).reduce((acc, c) => acc || c.hasAttribute('portal-manager'), false) === false) {\r\n      const entity = document.createElement('a-entity');\r\n      entity.setAttribute('portal-manager', { maxRecursion: data.maxRecursion });\r\n      sceneEl.appendChild(entity);\r\n    }\r\n\r\n    const portals = sceneEl.portals;\r\n    const pairs = sceneEl.portalPairs;\r\n\r\n    portals.push(el.object3D);\r\n\r\n    const dest = document.querySelector(data.destination);\r\n    if (dest) {\r\n      let isInPairs = false;\r\n      pairs.forEach((pair) => {\r\n        pair.forEach((portal) => {\r\n          if (portal == el.object3D) {\r\n            isInPairs = true;\r\n          }\r\n        });\r\n      });\r\n\r\n      if (isInPairs == false) {\r\n        pairs.push([el.object3D, dest.object3D]);\r\n      }\r\n    }\r\n  },\r\n\r\n  tick: function () {\r\n    const el = this.el;\r\n    if (el.justTeleported === true)\r\n      setTimeout(() => {\r\n        el.justTeleported = false;\r\n      }, this.data.teleportCooldown);\r\n  },\r\n\r\n  /*\r\n  renderSinglePortal: function () {\r\n    const sceneEl = this.el.sceneEl;\r\n    const scene = sceneEl.object3D;\r\n    const renderer = sceneEl.renderer;\r\n    const camera = sceneEl.camera;\r\n\r\n    renderer.autoClear = false;\r\n    camera.matrixAutoUpdate = false;\r\n\r\n    const gl = renderer.getContext();\r\n\r\n    const portal = this.el.object3D;\r\n    const destPortal = document.querySelector(this.data.destination).object3D;\r\n\r\n    const tmpScene = new THREE.Scene();\r\n    tmpScene.children = scene.children;\r\n\r\n    const portalScene = new THREE.Scene();\r\n    portalScene.children = portal.children;\r\n\r\n    const virtualCam = new THREE.PerspectiveCamera().copy(camera);\r\n    virtualCam.matrixWorld = computeViewMatrix(camera, portal, destPortal);\r\n    //projection matrix for Oblique View Frustum Depth Projection and Clipping\r\n    virtualCam.projectionMatrix = computeProjectionMatrix(\r\n      destPortal,\r\n      virtualCam.matrixWorld,\r\n      virtualCam.projectionMatrix\r\n    );\r\n\r\n    gl.enable(gl.STENCIL_TEST);\r\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\r\n    gl.stencilFunc(gl.NOTEQUAL, 1, 0xff);\r\n    gl.stencilMask(0xff);\r\n\r\n    renderer.render(portalScene, camera);\r\n\r\n    gl.stencilFunc(gl.EQUAL, 1, 0xff);\r\n    gl.stencilMask(0x00);\r\n\r\n    renderer.clearDepth();\r\n    renderer.render(tmpScene, virtualCam);\r\n\r\n    gl.stencilMask(0xff);\r\n    gl.disable(gl.STENCIL_TEST);\r\n\r\n    camera.matrixAutoUpdate = true;\r\n  },\r\n  */\r\n});\r\n","AFRAME.registerComponent('portal-manager', {\r\n  schema: {\r\n    maxRecursion: { default: 2 },\r\n  },\r\n\r\n  init: function () {},\r\n\r\n  tick: function () {\r\n    const sceneEl = this.el.sceneEl;\r\n    const portals = sceneEl.portals;\r\n\r\n    //sort portals by distance to camera\r\n    const cameraPosition = sceneEl.camera.getWorldPosition(new THREE.Vector3());\r\n    const sortedPortals = portals\r\n      .map((portal) => {\r\n        return { portal: portal, distance: portal.getWorldPosition(new THREE.Vector3()).distanceTo(cameraPosition) };\r\n      })\r\n      .sort((a, b) => b.distance - a.distance);\r\n\r\n    sceneEl.portals = sortedPortals.map((obj) => obj.portal);\r\n  },\r\n\r\n  tock: function () {\r\n    const sceneEl = this.el.sceneEl;\r\n    const camera = sceneEl.camera;\r\n    const renderer = sceneEl.renderer;\r\n\r\n    this.renderRecursivePortals(renderer, camera, 0);\r\n    this.collisionDetection();\r\n  },\r\n\r\n  renderRecursivePortals: function (renderer, camera, recursionLevel) {\r\n    const sceneEl = this.el.sceneEl;\r\n    const portals = sceneEl.portals;\r\n\r\n    const gl = renderer.getContext();\r\n\r\n    renderer.autoClear = false;\r\n    camera.matrixAutoUpdate = false;\r\n\r\n    portals.forEach((portal) => {\r\n      const destId = portal.el.components['portal'].data.destination;\r\n      const destPortal = document.querySelector(destId).object3D;\r\n\r\n      gl.colorMask(false, false, false, false);\r\n      gl.depthMask(false);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.enable(gl.STENCIL_TEST);\r\n      gl.stencilFunc(gl.NOTEQUAL, recursionLevel, 0xff);\r\n      gl.stencilOp(gl.INCR, gl.KEEP, gl.KEEP);\r\n      gl.stencilMask(0xff);\r\n\r\n      //render portal into stencil buffer\r\n      renderer.render(portal, camera);\r\n\r\n      const virtualCam = new THREE.PerspectiveCamera().copy(camera);\r\n      virtualCam.matrixWorld = computeViewMatrix(camera, portal, destPortal);\r\n      //projection matrix for frustrum clipping\r\n      virtualCam.projectionMatrix = computeProjectionMatrix(\r\n        destPortal,\r\n        virtualCam.matrixWorld,\r\n        virtualCam.projectionMatrix\r\n      );\r\n\r\n      if (recursionLevel == this.data.maxRecursion) {\r\n        gl.colorMask(true, true, true, true);\r\n        gl.depthMask(true);\r\n        renderer.clear(false, true, false);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.enable(gl.STENCIL_TEST);\r\n        gl.stencilMask(0x00);\r\n        gl.stencilFunc(gl.EQUAL, recursionLevel + 1, 0xff);\r\n\r\n        const nonPortals = new THREE.Scene();\r\n        nonPortals.children = sceneEl.object3D.children.filter((obj) => !portals.includes(obj));\r\n\r\n        const tmpScene = new THREE.Scene();\r\n        tmpScene.children = sceneEl.object3D.children;\r\n\r\n        //render the rest of the scene, limited to the stencil buffer\r\n        renderer.render(tmpScene, virtualCam);\r\n      } else {\r\n        //recursion\r\n        this.renderRecursivePortals(renderer, virtualCam, recursionLevel + 1);\r\n      }\r\n\r\n      gl.colorMask(false, false, false, false);\r\n      gl.depthMask(false);\r\n      gl.enable(gl.STENCIL_TEST);\r\n      gl.stencilMask(0xff);\r\n      gl.stencilFunc(gl.NOTEQUAL, recursionLevel + 1, 0xff);\r\n      gl.stencilOp(gl.DECR, gl.KEEP, gl.KEEP);\r\n\r\n      //render portal into stencil buffer\r\n      renderer.render(portal, camera);\r\n    });\r\n\r\n    gl.disable(gl.STENCIL_TEST);\r\n    gl.stencilMask(0x00);\r\n    gl.colorMask(false, false, false, false);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthMask(true);\r\n    gl.depthFunc(gl.ALWAYS);\r\n    renderer.clear(false, true, false);\r\n\r\n    //render portals into depth buffer\r\n    portals.forEach((portal) => {\r\n      renderer.render(portal, camera);\r\n    });\r\n\r\n    gl.depthFunc(gl.LESS);\r\n    gl.enable(gl.STENCIL_TEST);\r\n    gl.stencilMask(0x00);\r\n    gl.stencilFunc(gl.LEQUAL, recursionLevel, 0xff);\r\n    gl.colorMask(true, true, true, true);\r\n    gl.depthMask(true);\r\n\r\n    const nonPortals = new THREE.Scene();\r\n    nonPortals.children = sceneEl.object3D.children.filter((obj) => !portals.includes(obj));\r\n\r\n    //render the rest of the scene, but only at recursionLevel\r\n    renderer.render(nonPortals, camera);\r\n\r\n    camera.matrixAutoUpdate = true;\r\n  },\r\n\r\n  collisionDetection: function () {\r\n    const sceneEl = this.el.sceneEl;\r\n    const portals = sceneEl.portals;\r\n    const camera = sceneEl.camera;\r\n\r\n    //portal collision detection\r\n    const collisions = portals.map((portal) => {\r\n      const mesh = portal.children.filter((c) => c.name == 'portal-surface')[0];\r\n      const bbox = new THREE.Box3().setFromObject(mesh);\r\n      const bounds = {\r\n        portal: portal,\r\n        xMin: bbox.min.x,\r\n        xMax: bbox.max.x,\r\n        yMin: bbox.min.y,\r\n        yMax: bbox.max.y,\r\n        zMin: bbox.min.z,\r\n        zMax: bbox.max.z,\r\n      };\r\n      return bounds;\r\n    });\r\n\r\n    const width = 0.1; //width of user hitbox, arbitrary number\r\n\r\n    //calculate user bounds\r\n    const camPos = camera.getWorldPosition(new THREE.Vector3());\r\n    const bounds = {\r\n      xMin: camPos.x - width / 2,\r\n      xMax: camPos.x + width / 2,\r\n      yMin: camPos.y - width / 2,\r\n      yMax: camPos.y + width / 2,\r\n      zMin: camPos.z - width / 2,\r\n      zMax: camPos.z + width / 2,\r\n    };\r\n\r\n    collisions.forEach((obj) => {\r\n      if (\r\n        bounds.xMin <= obj.xMax &&\r\n        bounds.xMax >= obj.xMin &&\r\n        bounds.yMin <= obj.yMax &&\r\n        bounds.yMax >= obj.yMin &&\r\n        bounds.zMin <= obj.zMax &&\r\n        bounds.zMax >= obj.zMin\r\n      ) {\r\n        //there is a collision\r\n        const portalEl = obj.portal.el;\r\n        if (portalEl.isCameraColliding === false) {\r\n          portalEl.emit('camera-collision-start');\r\n          portalEl.isCameraColliding = true;\r\n        }\r\n      } else {\r\n        const portalEl = obj.portal.el;\r\n        if (portalEl.isCameraColliding === true) {\r\n          portalEl.emit('camera-collision-end');\r\n          portalEl.isCameraColliding = false;\r\n        }\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\nfunction computeViewMatrix(camera, src, dst) {\r\n  const srcToCam = camera.matrixWorld.clone();\r\n  srcToCam.invert().multiply(src.matrixWorld);\r\n\r\n  const dstInverse = dst.matrixWorld.clone().invert();\r\n  const rotationYMatrix = new THREE.Matrix4().makeRotationY(Math.PI);\r\n  const srcToDst = new THREE.Matrix4().multiply(srcToCam).multiply(rotationYMatrix).multiply(dstInverse);\r\n\r\n  return srcToDst.invert();\r\n}\r\n\r\nfunction computeProjectionMatrix(dst, viewMat, projMat) {\r\n  const cameraInverseViewMat = viewMat.clone().invert();\r\n\r\n  const dstRotationMatrix = new THREE.Matrix4().extractRotation(dst.matrixWorld);\r\n\r\n  const normal = new THREE.Vector3().set(0, 0, 1).applyMatrix4(dstRotationMatrix);\r\n\r\n  const clipPlane = new THREE.Plane();\r\n  clipPlane.setFromNormalAndCoplanarPoint(normal, dst.getWorldPosition(new THREE.Vector3()));\r\n  clipPlane.applyMatrix4(cameraInverseViewMat);\r\n\r\n  const clipVector = new THREE.Vector4();\r\n  clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant);\r\n\r\n  const projectionMatrix = projMat.clone();\r\n\r\n  const q = new THREE.Vector4();\r\n  q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\r\n  q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\r\n  q.z = -1.0;\r\n  q.w = (1.0 + projectionMatrix.elements[10]) / projMat.elements[14];\r\n\r\n  clipVector.multiplyScalar(2 / clipVector.dot(q));\r\n\r\n  projectionMatrix.elements[2] = clipVector.x;\r\n  projectionMatrix.elements[6] = clipVector.y;\r\n  projectionMatrix.elements[10] = clipVector.z + 1.0;\r\n  projectionMatrix.elements[14] = clipVector.w;\r\n\r\n  return projectionMatrix;\r\n}\r\n"],"names":["AFRAME","registerComponent","schema","destination","default","width","height","maxRecursion","teleportCooldown","enableTeleport","init","el","this","sceneEl","data","justTeleported","isCameraColliding","geometry","THREE","BoxBufferGeometry","material","MeshBasicMaterial","mesh","Mesh","name","object3D","add","addEventListener","emit","camera","cameraEl","destPortal","document","querySelector","srcRotation","rotation","dstRotation","deltaRotation","Euler","x","y","Math","PI","z","components","yawObject","buffer","getWorldDirection","Vector3","multiplyScalar","cameraPosition","getWorldPosition","portalPosition","deltaPosition","subVectors","sub","rotatedDeltaPosition","clone","theta","cos","sin","destPosition","position","portals","portalPairs","Array","from","children","reduce","acc","c","hasAttribute","entity","createElement","setAttribute","appendChild","pairs","push","dest","isInPairs","forEach","pair","portal","tick","setTimeout","sortedPortals","map","distance","distanceTo","sort","a","b","obj","tock","renderRecursivePortals","renderer","collisionDetection","recursionLevel","gl","getContext","autoClear","matrixAutoUpdate","colorMask","depthMask","disable","DEPTH_TEST","enable","STENCIL_TEST","stencilFunc","NOTEQUAL","stencilOp","INCR","KEEP","stencilMask","render","virtualCam","PerspectiveCamera","copy","matrixWorld","src","dst","srcToCam","invert","multiply","dstInverse","rotationYMatrix","Matrix4","makeRotationY","computeViewMatrix","projectionMatrix","viewMat","projMat","cameraInverseViewMat","dstRotationMatrix","extractRotation","normal","set","applyMatrix4","clipPlane","Plane","setFromNormalAndCoplanarPoint","clipVector","Vector4","constant","q","sign","elements","w","dot","computeProjectionMatrix","_this","clear","EQUAL","Scene","filter","includes","tmpScene","DECR","depthFunc","ALWAYS","LESS","LEQUAL","nonPortals","collisions","bbox","Box3","setFromObject","xMin","min","xMax","max","yMin","yMax","zMin","zMax","camPos","bounds","portalEl"],"mappings":"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"}