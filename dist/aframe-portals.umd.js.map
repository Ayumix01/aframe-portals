{"version":3,"file":"aframe-portals.umd.js","sources":["../src/portal.js","../src/portal-renderer.js"],"sourcesContent":["AFRAME.registerComponent('portal', {\r\n  schema: {\r\n    destSelector: { default: '' }, //rename\r\n    width: { default: 2 },\r\n    height: { default: 3 },\r\n    maxRecursion: { default: 2 },\r\n  },\r\n\r\n  init: function () {\r\n    const el = this.el;\r\n    const sceneEl = el.sceneEl;\r\n    const data = this.data;\r\n\r\n    el.justTeleported = false;\r\n\r\n    //portal mesh\r\n    const geometry = new THREE.BoxBufferGeometry(data.width, data.height, 0.01);\r\n    const material = new THREE.MeshBasicMaterial({\r\n      colorWrite: false,\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    mesh.geometry.computeBoundingSphere();\r\n    mesh.frustumCulled = true;\r\n    mesh.matrixAutoUpdate = false;\r\n    mesh.renderOrder = 2;\r\n    mesh.visible = true;\r\n    mesh.name = 'portal-surface';\r\n\r\n    el.object3D.add(mesh);\r\n\r\n    sceneEl.addEventListener('portal-teleported', () => {\r\n      el.justTeleported = true;\r\n    });\r\n\r\n    el.addEventListener('camera-collision', function () {\r\n      if (el.justTeleported === true) return;\r\n      el.justTeleported = true;\r\n      sceneEl.emit('portal-teleported');\r\n\r\n      //teleport the camera\r\n      const camera = sceneEl.camera;\r\n      const cameraEl = camera.el;\r\n\r\n      const destPortal = document.querySelector(data.destSelector).object3D;\r\n\r\n      const srcRotation = el.object3D.rotation;\r\n      const dstRotation = destPortal.rotation;\r\n\r\n      const deltaRotation = new THREE.Euler(\r\n        srcRotation.x - dstRotation.x,\r\n        srcRotation.y - dstRotation.y,\r\n        srcRotation.z - dstRotation.z\r\n      );\r\n\r\n      if (cameraEl.components['look-controls']) {\r\n        cameraEl.components['look-controls'].yawObject.rotation.y += deltaRotation.y;\r\n      }\r\n\r\n      const deltaPosition = new THREE.Vector3();\r\n      deltaPosition.subVectors(\r\n        camera.getWorldPosition(new THREE.Vector3()),\r\n        el.object3D.getWorldPosition(new THREE.Vector3())\r\n      );\r\n\r\n      const destPosition = destPortal.position.clone().add(deltaPosition);\r\n\r\n      camera.el.object3D.position.x = destPosition.x;\r\n      camera.el.object3D.position.y = destPosition.y;\r\n      camera.el.object3D.position.z = destPosition.z;\r\n    });\r\n\r\n    if (!sceneEl.portals) {\r\n      //use sceneEl to store state\r\n      sceneEl.portals = [];\r\n      sceneEl.portalPairs = [];\r\n    }\r\n\r\n    //if there is not already a portal-renderer entity, create one\r\n    if (Array.from(sceneEl.children).reduce((acc, c) => acc || c.hasAttribute('portal-renderer'), false) === false) {\r\n      const entity = document.createElement('a-entity');\r\n      entity.setAttribute('portal-renderer', { maxRecursion: data.maxRecursion });\r\n      sceneEl.appendChild(entity);\r\n    }\r\n\r\n    const portals = sceneEl.portals;\r\n    const pairs = sceneEl.portalPairs;\r\n\r\n    portals.push(el.object3D);\r\n\r\n    const dest = document.querySelector(data.destSelector);\r\n    if (dest) {\r\n      let isInPairs = false;\r\n      pairs.forEach((pair) => {\r\n        pair.forEach((portal) => {\r\n          if (portal == el.object3D) {\r\n            isInPairs = true;\r\n          }\r\n        });\r\n      });\r\n\r\n      if (isInPairs == false) {\r\n        pairs.push([el.object3D, dest.object3D]);\r\n      }\r\n    }\r\n  },\r\n\r\n  tick: function () {\r\n    const el = this.el;\r\n    if (el.justTeleported === true)\r\n      setTimeout(() => {\r\n        el.justTeleported = false;\r\n      }, 100);\r\n  },\r\n\r\n  /*\r\n  renderSinglePortal: function () {\r\n    const sceneEl = this.el.sceneEl;\r\n    const scene = sceneEl.object3D;\r\n    const renderer = sceneEl.renderer;\r\n    const camera = sceneEl.camera;\r\n\r\n    renderer.autoClear = false;\r\n    camera.matrixAutoUpdate = false;\r\n\r\n    const gl = renderer.getContext();\r\n\r\n    const portal = this.el.object3D;\r\n    const destPortal = document.querySelector(this.data.destSelector).object3D;\r\n\r\n    const tmpScene = new THREE.Scene();\r\n    tmpScene.children = scene.children;\r\n\r\n    const portalScene = new THREE.Scene();\r\n    portalScene.children = portal.children;\r\n\r\n    const virtualCam = new THREE.PerspectiveCamera().copy(camera);\r\n    virtualCam.matrixWorld = computeViewMatrix(camera, portal, destPortal);\r\n    //projection matrix for Oblique View Frustum Depth Projection and Clipping\r\n    virtualCam.projectionMatrix = computeProjectionMatrix(\r\n      destPortal,\r\n      virtualCam.matrixWorld,\r\n      virtualCam.projectionMatrix\r\n    );\r\n\r\n    gl.enable(gl.STENCIL_TEST);\r\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\r\n    gl.stencilFunc(gl.NOTEQUAL, 1, 0xff);\r\n    gl.stencilMask(0xff);\r\n\r\n    renderer.render(portalScene, camera);\r\n\r\n    gl.stencilFunc(gl.EQUAL, 1, 0xff);\r\n    gl.stencilMask(0x00);\r\n\r\n    renderer.clearDepth();\r\n    renderer.render(tmpScene, virtualCam);\r\n\r\n    gl.stencilMask(0xff);\r\n    gl.disable(gl.STENCIL_TEST);\r\n\r\n    camera.matrixAutoUpdate = true;\r\n  },\r\n  */\r\n});\r\n","AFRAME.registerComponent('portal-renderer', {\r\n  schema: {\r\n    maxRecursion: { default: 2 },\r\n  },\r\n\r\n  init: function () {},\r\n\r\n  tick: function () {\r\n    const sceneEl = this.el.sceneEl;\r\n    const portals = sceneEl.portals;\r\n    const camera = sceneEl.camera;\r\n\r\n    //portal collision detection\r\n    const collisions = portals.map((portal) => {\r\n      const mesh = portal.children.filter((c) => c.name == 'portal-surface')[0];\r\n      const bbox = new THREE.Box3().setFromObject(mesh);\r\n      const bounds = {\r\n        portal: portal,\r\n        xMin: bbox.min.x,\r\n        xMax: bbox.max.x,\r\n        yMin: bbox.min.y,\r\n        yMax: bbox.max.y,\r\n        zMin: bbox.min.z,\r\n        zMax: bbox.max.z,\r\n      };\r\n      return bounds;\r\n    });\r\n\r\n    const width = 0.1; //width of user hitbox, arbitrary number\r\n\r\n    //calculate user bounds\r\n    const camPos = camera.getWorldPosition(new THREE.Vector3());\r\n    const bounds = {\r\n      xMin: camPos.x - width / 2,\r\n      xMax: camPos.x + width / 2,\r\n      yMin: camPos.y - width / 2,\r\n      yMax: camPos.y + width / 2,\r\n      zMin: camPos.z - width / 2,\r\n      zMax: camPos.z + width / 2,\r\n    };\r\n\r\n    collisions.forEach((obj) => {\r\n      if (\r\n        bounds.xMin <= obj.xMax &&\r\n        bounds.xMax >= obj.xMin &&\r\n        bounds.yMin <= obj.yMax &&\r\n        bounds.yMax >= obj.yMin &&\r\n        bounds.zMin <= obj.zMax &&\r\n        bounds.zMax >= obj.zMin\r\n      ) {\r\n        //there is a collision\r\n        console.log('collision!');\r\n        const portalEl = obj.portal.el;\r\n        portalEl.emit('camera-collision');\r\n      }\r\n    });\r\n  },\r\n\r\n  tock: function () {\r\n    const camera = this.el.sceneEl.camera;\r\n    const renderer = this.el.sceneEl.renderer;\r\n\r\n    this.renderRecursivePortals(renderer, camera, 0);\r\n  },\r\n\r\n  renderRecursivePortals: function (renderer, camera, recursionLevel) {\r\n    const sceneEl = this.el.sceneEl;\r\n    const portals = sceneEl.portals;\r\n    const pairs = sceneEl.portalPairs;\r\n\r\n    const gl = renderer.getContext();\r\n\r\n    renderer.autoClear = false;\r\n    camera.matrixAutoUpdate = false;\r\n\r\n    pairs.forEach((pair) => {\r\n      pair.forEach((portal, i) => {\r\n        const destPortal = pair[1 - i];\r\n\r\n        const portalScene = new THREE.Scene();\r\n        portalScene.children = portal.children;\r\n\r\n        gl.colorMask(false, false, false, false);\r\n        gl.depthMask(false);\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.enable(gl.STENCIL_TEST);\r\n        gl.stencilFunc(gl.NOTEQUAL, recursionLevel, 0xff);\r\n        gl.stencilOp(gl.INCR, gl.KEEP, gl.KEEP);\r\n        gl.stencilMask(0xff);\r\n\r\n        //render portal into stencil buffer\r\n        renderer.render(portalScene, camera);\r\n\r\n        const virtualCam = new THREE.PerspectiveCamera().copy(camera);\r\n        virtualCam.matrixWorld = computeViewMatrix(camera, portal, destPortal);\r\n        //projection matrix for Oblique View Frustum Depth Projection and Clipping\r\n        virtualCam.projectionMatrix = computeProjectionMatrix(\r\n          destPortal,\r\n          virtualCam.matrixWorld,\r\n          virtualCam.projectionMatrix\r\n        );\r\n\r\n        if (recursionLevel == this.data.maxRecursion) {\r\n          gl.colorMask(true, true, true, true);\r\n          gl.depthMask(true);\r\n          renderer.clear(false, true, false);\r\n          gl.enable(gl.DEPTH_TEST);\r\n          gl.enable(gl.STENCIL_TEST);\r\n          gl.stencilMask(0x00);\r\n          gl.stencilFunc(gl.EQUAL, recursionLevel + 1, 0xff);\r\n\r\n          const nonPortals = new THREE.Scene();\r\n          nonPortals.children = sceneEl.object3D.children.filter((obj) => !portals.includes(obj));\r\n\r\n          const tmpScene = new THREE.Scene();\r\n          tmpScene.children = sceneEl.object3D.children;\r\n\r\n          //render the rest of the scene, limited to the stencil buffer\r\n          renderer.render(tmpScene, virtualCam);\r\n        } else {\r\n          //recursion\r\n          this.renderRecursivePortals(renderer, virtualCam, recursionLevel + 1);\r\n        }\r\n\r\n        gl.colorMask(false, false, false, false);\r\n        gl.depthMask(false);\r\n        gl.enable(gl.STENCIL_TEST);\r\n        gl.stencilMask(0xff);\r\n        gl.stencilFunc(gl.NOTEQUAL, recursionLevel + 1, 0xff);\r\n        gl.stencilOp(gl.DECR, gl.KEEP, gl.KEEP);\r\n\r\n        //render portal into stencil buffer\r\n        renderer.render(portalScene, camera);\r\n      });\r\n    });\r\n\r\n    gl.disable(gl.STENCIL_TEST);\r\n    gl.stencilMask(0x00);\r\n    gl.colorMask(false, false, false, false);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthMask(true);\r\n    gl.depthFunc(gl.ALWAYS);\r\n    renderer.clear(false, true, false);\r\n\r\n    //render portals into depth buffer\r\n    portals.forEach((portal) => {\r\n      const portalScene = new THREE.Scene();\r\n      portalScene.children = portal.children;\r\n      renderer.render(portalScene, camera);\r\n    });\r\n\r\n    gl.depthFunc(gl.LESS);\r\n    gl.enable(gl.STENCIL_TEST);\r\n    gl.stencilMask(0x00);\r\n    gl.stencilFunc(gl.LEQUAL, recursionLevel, 0xff);\r\n    gl.colorMask(true, true, true, true);\r\n    gl.depthMask(true);\r\n\r\n    const nonPortals = new THREE.Scene();\r\n    //nonPortals.children = sceneEl.object3D.children.filter((obj) => !portals.includes(obj));\r\n    nonPortals.children = sceneEl.object3D.children;\r\n\r\n    const tmpScene = new THREE.Scene();\r\n    tmpScene.children = sceneEl.object3D.children;\r\n\r\n    //render the rest of the scene, only at recursionLevel\r\n    renderer.render(tmpScene, camera);\r\n\r\n    camera.matrixAutoUpdate = true;\r\n  },\r\n});\r\n\r\nfunction computeViewMatrix(camera, src, dst) {\r\n  const srcToCam = camera.matrixWorld.clone();\r\n  srcToCam.invert().multiply(src.matrixWorld);\r\n\r\n  const dstInverse = dst.matrixWorld.clone().invert();\r\n  const rotationYMatrix = new THREE.Matrix4().makeRotationY(Math.PI);\r\n  const srcToDst = new THREE.Matrix4().multiply(srcToCam).multiply(rotationYMatrix).multiply(dstInverse);\r\n\r\n  return srcToDst.invert();\r\n}\r\n\r\nfunction computeProjectionMatrix(dst, viewMat, projMat) {\r\n  const cameraInverseViewMat = viewMat.clone().invert();\r\n\r\n  const dstRotationMatrix = new THREE.Matrix4().extractRotation(dst.matrixWorld);\r\n\r\n  const normal = new THREE.Vector3().set(0, 0, 1).applyMatrix4(dstRotationMatrix);\r\n\r\n  const clipPlane = new THREE.Plane();\r\n  clipPlane.setFromNormalAndCoplanarPoint(normal, dst.getWorldPosition(new THREE.Vector3()));\r\n  clipPlane.applyMatrix4(cameraInverseViewMat);\r\n\r\n  const clipVector = new THREE.Vector4();\r\n  clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant);\r\n\r\n  const projectionMatrix = projMat.clone();\r\n\r\n  const q = new THREE.Vector4();\r\n  q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\r\n  q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\r\n  q.z = -1.0;\r\n  q.w = (1.0 + projectionMatrix.elements[10]) / projMat.elements[14];\r\n\r\n  clipVector.multiplyScalar(2 / clipVector.dot(q));\r\n\r\n  projectionMatrix.elements[2] = clipVector.x;\r\n  projectionMatrix.elements[6] = clipVector.y;\r\n  projectionMatrix.elements[10] = clipVector.z + 1.0;\r\n  projectionMatrix.elements[14] = clipVector.w;\r\n\r\n  return projectionMatrix;\r\n}\r\n"],"names":["AFRAME","registerComponent","schema","destSelector","default","width","height","maxRecursion","init","el","this","sceneEl","data","justTeleported","geometry","THREE","BoxBufferGeometry","material","MeshBasicMaterial","colorWrite","mesh","Mesh","computeBoundingSphere","frustumCulled","matrixAutoUpdate","renderOrder","visible","name","object3D","add","addEventListener","emit","camera","cameraEl","destPortal","document","querySelector","srcRotation","rotation","dstRotation","deltaRotation","Euler","x","y","z","components","yawObject","deltaPosition","Vector3","subVectors","getWorldPosition","destPosition","position","clone","portals","portalPairs","Array","from","children","reduce","acc","c","hasAttribute","entity","createElement","setAttribute","appendChild","pairs","push","dest","isInPairs","forEach","pair","portal","tick","setTimeout","collisions","map","filter","bbox","Box3","setFromObject","xMin","min","xMax","max","yMin","yMax","zMin","zMax","camPos","bounds","obj","console","log","tock","renderRecursivePortals","renderer","recursionLevel","gl","getContext","autoClear","i","portalScene","Scene","colorMask","depthMask","disable","DEPTH_TEST","enable","STENCIL_TEST","stencilFunc","NOTEQUAL","stencilOp","INCR","KEEP","stencilMask","render","virtualCam","PerspectiveCamera","copy","matrixWorld","src","dst","srcToCam","invert","multiply","dstInverse","rotationYMatrix","Matrix4","makeRotationY","Math","PI","computeViewMatrix","projectionMatrix","viewMat","projMat","cameraInverseViewMat","dstRotationMatrix","extractRotation","normal","set","applyMatrix4","clipPlane","Plane","setFromNormalAndCoplanarPoint","clipVector","Vector4","constant","q","sign","elements","w","multiplyScalar","dot","computeProjectionMatrix","_this","clear","EQUAL","includes","tmpScene","DECR","depthFunc","ALWAYS","LESS","LEQUAL"],"mappings":"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"}